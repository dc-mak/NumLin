prog: ALL ID DOT UNIT 
##
## Ends in an error in state: 94.
##
## exp -> ALL ID DOT . exp [ THEN R_PAREN IN EOP ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## ALL ID DOT 
##

I saw 'all <id> .' and was expecting an expression after it.
Examples:
    f x
    let <pat> = <exp> in <exp>
    if <cond> then <exp> else <exp>

prog: ALL ID UNSHARE 
##
## Ends in an error in state: 93.
##
## exp -> ALL ID . DOT exp [ THEN R_PAREN IN EOP ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## ALL ID 
##

I saw 'all <id>' and was expecting a '.' after it.

prog: ALL UNSHARE 
##
## Ends in an error in state: 92.
##
## exp -> ALL . ID DOT exp [ THEN R_PAREN IN EOP ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## ALL 
##

I saw 'all' and was expecting an identifier after it.
Example: all x . <exp>

prog: FUN ID COLON UNIT ARROW UNIT 
##
## Ends in an error in state: 77.
##
## exp -> FUN ID COLON lin ARROW . exp [ THEN R_PAREN IN EOP ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## FUN ID COLON lin ARROW 
##

I saw 'fun <id> : <type> ->' and was expecting an expression after it.
Examples:
    f x
    let <pat> = <exp> in <exp>
    if <cond> then <exp> else <exp>

prog: FUN ID COLON UNIT R_PAREN 
##
## Ends in an error in state: 76.
##
## exp -> FUN ID COLON lin . ARROW exp [ THEN R_PAREN IN EOP ELSE COMMA ]
## lin -> lin . LOLLIPOP lin [ LOLLIPOP ARROW ]
##
## The known suffix of the stack is as follows:
## FUN ID COLON lin 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 44, spurious reduction of production lin -> simple_lin 
##

I saw 'fun <id> : <type>' so far and was expecting a '->'

prog: FUN ID COLON UNSHARE 
##
## Ends in an error in state: 75.
##
## exp -> FUN ID COLON . lin ARROW exp [ THEN R_PAREN IN EOP ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## FUN ID COLON 
##

I saw 'fun <id> : ' and was expecting a <type> next

prog: FUN ID UNSHARE 
##
## Ends in an error in state: 74.
##
## exp -> FUN ID . COLON lin ARROW exp [ THEN R_PAREN IN EOP ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## FUN ID 
##

I saw 'fun <id>' and was expecting a type annotation and then '->'
Example: 'fun x : unit -> <exp>'

prog: FUN UNSHARE 
##
## Ends in an error in state: 73.
##
## exp -> FUN . ID COLON lin ARROW exp [ THEN R_PAREN IN EOP ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## FUN 
##

I saw 'fun' and was expecting '<id> : <type> -> <exp>' after it

prog: IF UNIT 
##
## Ends in an error in state: 69.
##
## exp -> IF . exp THEN exp ELSE exp [ THEN R_PAREN IN EOP ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## IF 
##

I saw 'if' and was expecting an expression after it

prog: IF UNSHARE R_PAREN 
##
## Ends in an error in state: 106.
##
## exp -> IF exp . THEN exp ELSE exp [ THEN R_PAREN IN EOP ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## IF exp 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 97, spurious reduction of production exp -> simple_exp 
##

I saw 'if <exp>' and was expecting 'then <exp> else <exp>' after it

prog: IF UNSHARE THEN UNIT 
##
## Ends in an error in state: 107.
##
## exp -> IF exp THEN . exp ELSE exp [ THEN R_PAREN IN EOP ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## IF exp THEN 
##

I saw 'if <exp> then' and was expecting '<exp> else <exp>' after it

prog: IF UNSHARE THEN UNSHARE ELSE UNIT 
##
## Ends in an error in state: 109.
##
## exp -> IF exp THEN exp ELSE . exp [ THEN R_PAREN IN EOP ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## IF exp THEN exp ELSE 
##

I saw 'if <exp> then <exp> else' and was expecting '<exp>' after it

prog: IF UNSHARE THEN UNSHARE THEN 
##
## Ends in an error in state: 108.
##
## exp -> IF exp THEN exp . ELSE exp [ THEN R_PAREN IN EOP ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## IF exp THEN exp 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 97, spurious reduction of production exp -> simple_exp 
##

I saw 'if <exp> then <exp>' and was expecting 'else <exp>' after it

prog: LET ID COLON ALL ID DOT UNIT STAR ELT_LT UNSHARE 
##
## Ends in an error in state: 47.
##
## lin -> ALL ID DOT lin . [ R_PAREN LOLLIPOP EQUAL ARROW ]
## lin -> lin . LOLLIPOP lin [ R_PAREN LOLLIPOP EQUAL ARROW ]
##
## The known suffix of the stack is as follows:
## ALL ID DOT lin 
##

I saw 'all <id> . <type>' and was expecting ')', '--o', '=' or '->'.

prog: LET ID COLON ALL ID DOT UNSHARE 
##
## Ends in an error in state: 43.
##
## lin -> ALL ID DOT . lin [ R_PAREN LOLLIPOP EQUAL ARROW ]
##
## The known suffix of the stack is as follows:
## ALL ID DOT 
##

I saw 'all <id> .' and was expecting a <type> next.
Example: unit, !int --o !int, all x . arr[x]

prog: LET ID COLON ALL ID UNSHARE 
##
## Ends in an error in state: 42.
##
## lin -> ALL ID . DOT lin [ R_PAREN LOLLIPOP EQUAL ARROW ]
##
## The known suffix of the stack is as follows:
## ALL ID 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID COLON ALL UNSHARE 
##
## Ends in an error in state: 41.
##
## lin -> ALL . ID DOT lin [ R_PAREN LOLLIPOP EQUAL ARROW ]
##
## The known suffix of the stack is as follows:
## ALL 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID COLON ARR_LT UNSHARE 
##
## Ends in an error in state: 31.
##
## simple_lin -> ARR_LT . delimited_fc [ STAR R_PAREN LOLLIPOP EQUAL ARROW ]
##
## The known suffix of the stack is as follows:
## ARR_LT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID COLON BANG UNSHARE 
##
## Ends in an error in state: 30.
##
## simple_lin -> BANG . simple_lin [ STAR R_PAREN LOLLIPOP EQUAL ARROW ]
##
## The known suffix of the stack is as follows:
## BANG 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID COLON L_PAREN UNIT EQUAL 
##
## Ends in an error in state: 50.
##
## lin -> lin . LOLLIPOP lin [ R_PAREN LOLLIPOP ]
## simple_lin -> L_PAREN lin . R_PAREN [ STAR R_PAREN LOLLIPOP EQUAL ARROW ]
##
## The known suffix of the stack is as follows:
## L_PAREN lin 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 44, spurious reduction of production lin -> simple_lin 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID COLON L_PAREN UNSHARE 
##
## Ends in an error in state: 27.
##
## simple_lin -> L_PAREN . lin R_PAREN [ STAR R_PAREN LOLLIPOP EQUAL ARROW ]
##
## The known suffix of the stack is as follows:
## L_PAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID COLON UNIT LOLLIPOP UNIT STAR ELT_LT UNSHARE 
##
## Ends in an error in state: 49.
##
## lin -> lin . LOLLIPOP lin [ R_PAREN LOLLIPOP EQUAL ARROW ]
## lin -> lin LOLLIPOP lin . [ R_PAREN LOLLIPOP EQUAL ARROW ]
##
## The known suffix of the stack is as follows:
## lin LOLLIPOP lin 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID COLON UNIT LOLLIPOP UNSHARE 
##
## Ends in an error in state: 48.
##
## lin -> lin LOLLIPOP . lin [ R_PAREN LOLLIPOP EQUAL ARROW ]
##
## The known suffix of the stack is as follows:
## lin LOLLIPOP 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID COLON UNIT R_PAREN 
##
## Ends in an error in state: 65.
##
## lin -> lin . LOLLIPOP lin [ LOLLIPOP EQUAL ]
## pat -> ID COLON lin . [ EQUAL ]
##
## The known suffix of the stack is as follows:
## ID COLON lin 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 44, spurious reduction of production lin -> simple_lin 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID COLON UNIT STAR UNSHARE 
##
## Ends in an error in state: 45.
##
## lin -> simple_lin STAR . simple_lin [ R_PAREN LOLLIPOP EQUAL ARROW ]
##
## The known suffix of the stack is as follows:
## simple_lin STAR 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID COLON UNIT UNSHARE 
##
## Ends in an error in state: 44.
##
## lin -> simple_lin . [ R_PAREN LOLLIPOP EQUAL ARROW ]
## lin -> simple_lin . STAR simple_lin [ R_PAREN LOLLIPOP EQUAL ARROW ]
##
## The known suffix of the stack is as follows:
## simple_lin 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID COLON UNSHARE 
##
## Ends in an error in state: 64.
##
## pat -> ID COLON . lin [ EQUAL ]
##
## The known suffix of the stack is as follows:
## ID COLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID UNSHARE 
##
## Ends in an error in state: 63.
##
## pat -> ID . COLON lin [ EQUAL ]
##
## The known suffix of the stack is as follows:
## ID 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET L_PAREN ID COMMA ID UNSHARE 
##
## Ends in an error in state: 61.
##
## pat -> L_PAREN ID COMMA ID . R_PAREN [ EQUAL ]
##
## The known suffix of the stack is as follows:
## L_PAREN ID COMMA ID 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET L_PAREN ID COMMA UNSHARE 
##
## Ends in an error in state: 60.
##
## pat -> L_PAREN ID COMMA . ID R_PAREN [ EQUAL ]
##
## The known suffix of the stack is as follows:
## L_PAREN ID COMMA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET L_PAREN ID UNSHARE 
##
## Ends in an error in state: 59.
##
## pat -> L_PAREN ID . COMMA ID R_PAREN [ EQUAL ]
##
## The known suffix of the stack is as follows:
## L_PAREN ID 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET L_PAREN UNSHARE 
##
## Ends in an error in state: 58.
##
## pat -> L_PAREN . ID COMMA ID R_PAREN [ EQUAL ]
##
## The known suffix of the stack is as follows:
## L_PAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET MANY ID EQUAL UNIT 
##
## Ends in an error in state: 67.
##
## exp -> LET pat EQUAL . exp IN exp [ THEN R_PAREN IN EOP ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## LET pat EQUAL 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET MANY ID EQUAL UNSHARE IN UNIT 
##
## Ends in an error in state: 112.
##
## exp -> LET pat EQUAL exp IN . exp [ THEN R_PAREN IN EOP ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## LET pat EQUAL exp IN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET MANY ID EQUAL UNSHARE THEN 
##
## Ends in an error in state: 111.
##
## exp -> LET pat EQUAL exp . IN exp [ THEN R_PAREN IN EOP ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## LET pat EQUAL exp 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 97, spurious reduction of production exp -> simple_exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET MANY ID UNSHARE 
##
## Ends in an error in state: 66.
##
## exp -> LET pat . EQUAL exp IN exp [ THEN R_PAREN IN EOP ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## LET pat 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET MANY UNSHARE 
##
## Ends in an error in state: 56.
##
## pat -> MANY . ID [ EQUAL ]
##
## The known suffix of the stack is as follows:
## MANY 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET REC ID L_PAREN ID COLON UNIT EQUAL 
##
## Ends in an error in state: 52.
##
## lin -> lin . LOLLIPOP lin [ R_PAREN LOLLIPOP ]
## pat -> REC ID L_PAREN ID COLON lin . R_PAREN COLON lin [ EQUAL ]
##
## The known suffix of the stack is as follows:
## REC ID L_PAREN ID COLON lin 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 44, spurious reduction of production lin -> simple_lin 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET REC ID L_PAREN ID COLON UNIT R_PAREN COLON UNIT R_PAREN 
##
## Ends in an error in state: 55.
##
## lin -> lin . LOLLIPOP lin [ LOLLIPOP EQUAL ]
## pat -> REC ID L_PAREN ID COLON lin R_PAREN COLON lin . [ EQUAL ]
##
## The known suffix of the stack is as follows:
## REC ID L_PAREN ID COLON lin R_PAREN COLON lin 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 44, spurious reduction of production lin -> simple_lin 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET REC ID L_PAREN ID COLON UNIT R_PAREN COLON UNSHARE 
##
## Ends in an error in state: 54.
##
## pat -> REC ID L_PAREN ID COLON lin R_PAREN COLON . lin [ EQUAL ]
##
## The known suffix of the stack is as follows:
## REC ID L_PAREN ID COLON lin R_PAREN COLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET REC ID L_PAREN ID COLON UNIT R_PAREN UNSHARE 
##
## Ends in an error in state: 53.
##
## pat -> REC ID L_PAREN ID COLON lin R_PAREN . COLON lin [ EQUAL ]
##
## The known suffix of the stack is as follows:
## REC ID L_PAREN ID COLON lin R_PAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET REC ID L_PAREN ID COLON UNSHARE 
##
## Ends in an error in state: 25.
##
## pat -> REC ID L_PAREN ID COLON . lin R_PAREN COLON lin [ EQUAL ]
##
## The known suffix of the stack is as follows:
## REC ID L_PAREN ID COLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET REC ID L_PAREN ID UNSHARE 
##
## Ends in an error in state: 24.
##
## pat -> REC ID L_PAREN ID . COLON lin R_PAREN COLON lin [ EQUAL ]
##
## The known suffix of the stack is as follows:
## REC ID L_PAREN ID 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET REC ID L_PAREN UNSHARE 
##
## Ends in an error in state: 23.
##
## pat -> REC ID L_PAREN . ID COLON lin R_PAREN COLON lin [ EQUAL ]
##
## The known suffix of the stack is as follows:
## REC ID L_PAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET REC ID UNSHARE 
##
## Ends in an error in state: 22.
##
## pat -> REC ID . L_PAREN ID COLON lin R_PAREN COLON lin [ EQUAL ]
##
## The known suffix of the stack is as follows:
## REC ID 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET REC UNSHARE 
##
## Ends in an error in state: 21.
##
## pat -> REC . ID L_PAREN ID COLON lin R_PAREN COLON lin [ EQUAL ]
##
## The known suffix of the stack is as follows:
## REC 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET UNSHARE 
##
## Ends in an error in state: 20.
##
## exp -> LET . pat EQUAL exp IN exp [ THEN R_PAREN IN EOP ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## LET 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: L_PAREN UNIT 
##
## Ends in an error in state: 16.
##
## simple_exp -> L_PAREN . R_PAREN [ UNSHARE TRUE THEN SUB_INT SUB_ELT SIN SHARE SET SCAL R_PAREN ROTMG OR NOT NAT MUL_INT MUL_ELT L_PAREN L_BRACKET LT_INT LT_ELT INT IN ID HYPOT GET FREE FLOAT FALSE EQ_INT EQ_ELT EOP ELSE DOTP DIV_INT DIV_ELT COPY COMMA AXPY ASUM ARRAY AND AMAX ADD_INT ADD_ELT ]
## simple_exp -> L_PAREN . exp COMMA exp R_PAREN [ UNSHARE TRUE THEN SUB_INT SUB_ELT SIN SHARE SET SCAL R_PAREN ROTMG OR NOT NAT MUL_INT MUL_ELT L_PAREN L_BRACKET LT_INT LT_ELT INT IN ID HYPOT GET FREE FLOAT FALSE EQ_INT EQ_ELT EOP ELSE DOTP DIV_INT DIV_ELT COPY COMMA AXPY ASUM ARRAY AND AMAX ADD_INT ADD_ELT ]
## simple_exp -> L_PAREN . exp R_PAREN [ UNSHARE TRUE THEN SUB_INT SUB_ELT SIN SHARE SET SCAL R_PAREN ROTMG OR NOT NAT MUL_INT MUL_ELT L_PAREN L_BRACKET LT_INT LT_ELT INT IN ID HYPOT GET FREE FLOAT FALSE EQ_INT EQ_ELT EOP ELSE DOTP DIV_INT DIV_ELT COPY COMMA AXPY ASUM ARRAY AND AMAX ADD_INT ADD_ELT ]
##
## The known suffix of the stack is as follows:
## L_PAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: L_PAREN UNSHARE COMMA UNIT 
##
## Ends in an error in state: 116.
##
## simple_exp -> L_PAREN exp COMMA . exp R_PAREN [ UNSHARE TRUE THEN SUB_INT SUB_ELT SIN SHARE SET SCAL R_PAREN ROTMG OR NOT NAT MUL_INT MUL_ELT L_PAREN L_BRACKET LT_INT LT_ELT INT IN ID HYPOT GET FREE FLOAT FALSE EQ_INT EQ_ELT EOP ELSE DOTP DIV_INT DIV_ELT COPY COMMA AXPY ASUM ARRAY AND AMAX ADD_INT ADD_ELT ]
##
## The known suffix of the stack is as follows:
## L_PAREN exp COMMA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: L_PAREN UNSHARE COMMA UNSHARE THEN 
##
## Ends in an error in state: 117.
##
## simple_exp -> L_PAREN exp COMMA exp . R_PAREN [ UNSHARE TRUE THEN SUB_INT SUB_ELT SIN SHARE SET SCAL R_PAREN ROTMG OR NOT NAT MUL_INT MUL_ELT L_PAREN L_BRACKET LT_INT LT_ELT INT IN ID HYPOT GET FREE FLOAT FALSE EQ_INT EQ_ELT EOP ELSE DOTP DIV_INT DIV_ELT COPY COMMA AXPY ASUM ARRAY AND AMAX ADD_INT ADD_ELT ]
##
## The known suffix of the stack is as follows:
## L_PAREN exp COMMA exp 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 97, spurious reduction of production exp -> simple_exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: L_PAREN UNSHARE THEN 
##
## Ends in an error in state: 114.
##
## simple_exp -> L_PAREN exp . COMMA exp R_PAREN [ UNSHARE TRUE THEN SUB_INT SUB_ELT SIN SHARE SET SCAL R_PAREN ROTMG OR NOT NAT MUL_INT MUL_ELT L_PAREN L_BRACKET LT_INT LT_ELT INT IN ID HYPOT GET FREE FLOAT FALSE EQ_INT EQ_ELT EOP ELSE DOTP DIV_INT DIV_ELT COPY COMMA AXPY ASUM ARRAY AND AMAX ADD_INT ADD_ELT ]
## simple_exp -> L_PAREN exp . R_PAREN [ UNSHARE TRUE THEN SUB_INT SUB_ELT SIN SHARE SET SCAL R_PAREN ROTMG OR NOT NAT MUL_INT MUL_ELT L_PAREN L_BRACKET LT_INT LT_ELT INT IN ID HYPOT GET FREE FLOAT FALSE EQ_INT EQ_ELT EOP ELSE DOTP DIV_INT DIV_ELT COPY COMMA AXPY ASUM ARRAY AND AMAX ADD_INT ADD_ELT ]
##
## The known suffix of the stack is as follows:
## L_PAREN exp 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 97, spurious reduction of production exp -> simple_exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MANY UNIT 
##
## Ends in an error in state: 15.
##
## exp -> MANY . simple_exp [ THEN R_PAREN IN EOP ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## MANY 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNIT 
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
## 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNSHARE L_BRACKET ID PLUS UNSHARE 
##
## Ends in an error in state: 35.
##
## fc -> ID PLUS . NAT [ R_BRACKET ]
##
## The known suffix of the stack is as follows:
## ID PLUS 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNSHARE L_BRACKET ID UNSHARE 
##
## Ends in an error in state: 34.
##
## fc -> ID . PLUS NAT [ R_BRACKET ]
## fc -> ID . [ R_BRACKET ]
##
## The known suffix of the stack is as follows:
## ID 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNSHARE L_BRACKET NAT UNSHARE 
##
## Ends in an error in state: 37.
##
## delimited_fc -> L_BRACKET fc . R_BRACKET [ UNSHARE TRUE THEN SUB_INT SUB_ELT STAR SIN SHARE SET SCAL R_PAREN ROTMG OR NOT NAT MUL_INT MUL_ELT L_PAREN L_BRACKET LT_INT LT_ELT LOLLIPOP INT IN ID HYPOT GET FREE FLOAT FALSE EQ_INT EQ_ELT EQUAL EOP ELSE DOTP DIV_INT DIV_ELT COPY COMMA AXPY ASUM ARROW ARRAY AND AMAX ADD_INT ADD_ELT ]
##
## The known suffix of the stack is as follows:
## L_BRACKET fc 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNSHARE L_BRACKET UNSHARE 
##
## Ends in an error in state: 32.
##
## delimited_fc -> L_BRACKET . fc R_BRACKET [ UNSHARE TRUE THEN SUB_INT SUB_ELT STAR SIN SHARE SET SCAL R_PAREN ROTMG OR NOT NAT MUL_INT MUL_ELT L_PAREN L_BRACKET LT_INT LT_ELT LOLLIPOP INT IN ID HYPOT GET FREE FLOAT FALSE EQ_INT EQ_ELT EQUAL EOP ELSE DOTP DIV_INT DIV_ELT COPY COMMA AXPY ASUM ARROW ARRAY AND AMAX ADD_INT ADD_ELT ]
##
## The known suffix of the stack is as follows:
## L_BRACKET 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNSHARE THEN 
##
## Ends in an error in state: 122.
##
## prog -> exp . EOP [ # ]
##
## The known suffix of the stack is as follows:
## exp 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 97, spurious reduction of production exp -> simple_exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNSHARE UNIT 
##
## Ends in an error in state: 97.
##
## exp -> simple_exp . [ THEN R_PAREN IN EOP ELSE COMMA ]
## exp -> simple_exp . nonempty_list(arg_like) [ THEN R_PAREN IN EOP ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## simple_exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNSHARE UNSHARE UNIT 
##
## Ends in an error in state: 102.
##
## nonempty_list(arg_like) -> arg_like . [ THEN R_PAREN IN EOP ELSE COMMA ]
## nonempty_list(arg_like) -> arg_like . nonempty_list(arg_like) [ THEN R_PAREN IN EOP ELSE COMMA ]
##
## The known suffix of the stack is as follows:
## arg_like 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

